import 'dart:convert';
import 'dart:io';

import 'package:dartle/dartle_dart.dart';
import 'package:jb/jb.dart' show logger;

const spdxLicensesUrl = 'https://raw.githubusercontent.com'
    '/spdx/license-list-data/main/json/licenses.json';

const licensesDartFile = 'lib/src/licenses.g.dart';
const licensesTaskName = 'generateLicenses';

void setupTaskDependencies(DartleDart dartleDart) {
  dartleDart.formatCode.dependsOn(const {licensesTaskName});
  dartleDart.analyzeCode.dependsOn(const {licensesTaskName});
}

final generateLicensesTask = Task(
  _generateLicenses,
  // DO NOT add a RunCondition otherwise this task will run in CI (no cache)
  name: licensesTaskName,
  phase: TaskPhase.setup,
  description:
      'Generates $licensesDartFile file containing SPDX license details. '
      'Delete this file to regenerate.',
);

Future<void> _generateLicenses(_) async {
  final output = File(licensesDartFile);
  if (await output.exists()) {
    logger.fine(
        () => 'Will not generate licenses file because it already exists.');
    return;
  }
  final client = HttpClient();
  dynamic licensesContainer;
  try {
    final request = await client.getUrl(Uri.parse(spdxLicensesUrl));
    final response = await request.close();
    licensesContainer =
        jsonDecode(await response.transform(utf8.decoder).join());
  } finally {
    client.close();
  }

  await _generate(licensesContainer['licenses'], output);
}

Future<void> _generate(licenses, File output) async {
  final outHandle = output.openWrite();
  try {
    await _writeLicenses(outHandle, licenses);
  } finally {
    await outHandle.close();
  }
}

// JSON License:
// {
//       "reference": "https://spdx.org/licenses/Apache-2.0.html",
//       "isDeprecatedLicenseId": false,
//       "detailsUrl": "https://spdx.org/licenses/Apache-2.0.json",
//       "referenceNumber": 141,
//       "name": "Apache License 2.0",
//       "licenseId": "Apache-2.0",
//       "seeAlso": [
//         "https://www.apache.org/licenses/LICENSE-2.0",
//         "https://opensource.org/licenses/Apache-2.0"
//       ],
//       "isOsiApproved": true,
//       "isFsfLibre": true
// }
Future<void> _writeLicenses(IOSink writer, licenses) async {
  writer.writeln(
      "// This file is generated by the 'generateLicenses' Dartle task.\n"
      "import 'maven_metadata.dart';\n\n"
      "const allLicenses = <String, License>{");
  for (final license in licenses) {
    // Dart License
    // License(
    //       {required this.licenseId,
    //       required this.name,
    //       required this.uri,
    //       required this.isOsiApproved,
    //       required this.isFsfLibre})
    writer.writeln('''
    "${license['licenseId']}": License(
      licenseId: "${license['licenseId']}",
      name: "${_escaped(license['name'])}",
      uri: "${license['reference']}",
      isOsiApproved: ${license['isOsiApproved']},
      isFsfLibre: ${license['isFsfLibre']},
    ),''');
  }
  writer.writeln('};');
}

String _escaped(Object value) {
  return value.toString().replaceAll('"', '\\"');
}
